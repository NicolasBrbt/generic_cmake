# Inclure le fichier des composants
include(CmakeComponent.txt)
cmake_minimum_required(VERSION 3.12)
set(CMAKE_CXX_STANDARD 23)
set(CMAKE_CXX_STANDARD_REQUIRED ON)


get_filename_component(PROJECT_NAME "${CMAKE_CURRENT_SOURCE_DIR}" NAME)
project(${PROJECT_NAME})

message(STATUS "CMAKE_GENERATOR: ${CMAKE_GENERATOR}")

# Options de compilation strictes
if(MSVC)
    # Options spécifiques pour MSVC
    message(STATUS "Compiling with MSVC options")
    add_compile_options(/W4 /WX)  # /W4 : niveau d'avertissement 4, /WX : traiter les avertissements comme des erreurs
else()
    # Options pour GCC et Clang
    message(STATUS "Compiling with GCC/Clang options")
    add_compile_options(-Wall -Wextra -Wpedantic)
endif()


set(INCLUDE_DIR ${CMAKE_BINARY_DIR}/include)
set(LIB_DIR ${CMAKE_BINARY_DIR}/libs)
set(BIN_DIR ${CMAKE_BINARY_DIR}/bin)

file(MAKE_DIRECTORY ${INCLUDE_DIR})
file(MAKE_DIRECTORY ${LIB_DIR})
file(MAKE_DIRECTORY ${BIN_DIR})

# Créer une cible personnalisée pour copier les fichiers d'en-tête
add_custom_target(copy_headers ALL)
add_custom_target(copy_libs ALL)
add_custom_target(copy_executables ALL)
add_custom_target(clear ALL)

# Générer les fichiers CMakeLists.txt pour chaque composant
message(STATUS "Génération des CmakeLists.txt")

foreach(appcpp ${APPCPP})
    string(REGEX REPLACE "BSC_" "" component ${appcpp})
    message(STATUS "Génération du CmakeLists.txt pour ${${appcpp}}")
    set(component_cmakeLists "${${appcpp}}/CMakeLists.txt")
    file(WRITE  ${component_cmakeLists} "set (sources \"\")\n")
    file(APPEND ${component_cmakeLists} "set (headers\"\")\n")
    file(APPEND ${component_cmakeLists} "set (dirsHeaders\"\")\n")
    file(APPEND ${component_cmakeLists} "\n")
    file(APPEND ${component_cmakeLists} "file(GLOB subdirsHeaders \"\${CMAKE_CURRENT_SOURCE_DIR}/include/*\")\n")
    file(APPEND ${component_cmakeLists} "file(GLOB subdirsSources \"\${CMAKE_CURRENT_SOURCE_DIR}/src/*\")\n")
    file(APPEND ${component_cmakeLists} "\n")
    file(APPEND ${component_cmakeLists} "foreach(dir \${subdirsHeaders})\n")
    file(APPEND ${component_cmakeLists} "\t if(IS_DIRECTORY \${dir})\n")
    file(APPEND ${component_cmakeLists} "\t\t list(APPEND dirsHeaders \${dir})\n")
    file(APPEND ${component_cmakeLists} "\t\t file(GLOB tmp_headers \"\${dir}/*.h\" \"\${dir}/*.hpp\")\n")
    file(APPEND ${component_cmakeLists} "\t\t list(APPEND headers \${tmp_headers})\n")
    file(APPEND ${component_cmakeLists} "\t endif()\n")
    file(APPEND ${component_cmakeLists} "endforeach()\n")
    file(APPEND ${component_cmakeLists} "\n")
    file(APPEND ${component_cmakeLists} "foreach(dir \${subdirsSources})\n")
    file(APPEND ${component_cmakeLists} "\t if(IS_DIRECTORY \${dir})\n")
    file(APPEND ${component_cmakeLists} "\t\t file(GLOB tmp_sources \"\${dir}/*.c\" \"\${dir}/*.cpp\")\n")
    file(APPEND ${component_cmakeLists} "\t\t list(APPEND sources \${tmp_sources})\n")
    file(APPEND ${component_cmakeLists} "\t endif()\n")
    file(APPEND ${component_cmakeLists} "endforeach()\n")
    file(APPEND ${component_cmakeLists} "\n")
    file(APPEND ${component_cmakeLists} "file(GLOB tmp_sources \"\${CMAKE_CURRENT_SOURCE_DIR}/src/*.c\" \"\${CMAKE_CURRENT_SOURCE_DIR}/src/*.cpp\")\n")
    file(APPEND ${component_cmakeLists} "file(GLOB tmp_headers \"\${CMAKE_CURRENT_SOURCE_DIR}/include/*.h\" \"\${CMAKE_CURRENT_SOURCE_DIR}/include/*.hpp\")\n")
    file(APPEND ${component_cmakeLists} "list(APPEND headers \${tmp_headers})\n")
    file(APPEND ${component_cmakeLists} "list(APPEND sources \${tmp_sources})\n")
    file(APPEND ${component_cmakeLists} "\n")
    file(APPEND ${component_cmakeLists} "add_executable(${component} \${sources} \${headers})\n")
    file(APPEND ${component_cmakeLists} "\n")
    file(APPEND ${component_cmakeLists} "foreach(dir \${subdirsHeaders})\n")
    file(APPEND ${component_cmakeLists} "\t target_include_directories(${component} PUBLIC \${dir})\n")
    file(APPEND ${component_cmakeLists} "endforeach()\n")
    file(APPEND ${component_cmakeLists} "target_include_directories(${component} PUBLIC \${CMAKE_CURRENT_SOURCE_DIR}/include)\n")
    if(NOT "${BSC_${component}_DEPS}" STREQUAL "")
        foreach(deps ${BSC_${component}_DEPS})
            string(REGEX REPLACE "BSC_" "" dependance ${deps})
            file(APPEND ${component_cmakeLists} "\n")
            file(APPEND ${component_cmakeLists} "target_link_libraries(${component} PUBLIC ${dependance})")
        endforeach(deps ${BSC_${component}_DEPS})
    endif()
    file(APPEND ${component_cmakeLists} "\n")
    file(APPEND ${component_cmakeLists} "add_dependencies(${component} copy_headers)\n")
endforeach(appcpp ${APPCPP})

foreach(appc ${APPC})
    string(REGEX REPLACE "BSC_" "" component ${appc})
    message(STATUS "Génération du CmakeLists.txt pour ${${appc}}")
    set(component_cmakeLists "${${appc}}/CMakeLists.txt")
    file(WRITE  ${component_cmakeLists} "set (sources \"\")\n")
    file(APPEND ${component_cmakeLists} "set (headers\"\")\n")
    file(APPEND ${component_cmakeLists} "set (dirsHeaders\"\")\n")
    file(APPEND ${component_cmakeLists} "\n")
    file(APPEND ${component_cmakeLists} "file(GLOB subdirsHeaders \"\${CMAKE_CURRENT_SOURCE_DIR}/include/*\")\n")
    file(APPEND ${component_cmakeLists} "file(GLOB subdirsSources \"\${CMAKE_CURRENT_SOURCE_DIR}/src/*\")\n")
    file(APPEND ${component_cmakeLists} "\n")
    file(APPEND ${component_cmakeLists} "foreach(dir \${subdirsHeaders})\n")
    file(APPEND ${component_cmakeLists} "\t if(IS_DIRECTORY \${dir})\n")
    file(APPEND ${component_cmakeLists} "\t\t list(APPEND dirsHeaders \${dir})\n")
    file(APPEND ${component_cmakeLists} "\t\t file(GLOB tmp_headers \"\${dir}/*.h\")\n")
    file(APPEND ${component_cmakeLists} "\t\t list(APPEND headers \${tmp_headers})\n")
    file(APPEND ${component_cmakeLists} "\t endif()\n")
    file(APPEND ${component_cmakeLists} "endforeach()\n")
    file(APPEND ${component_cmakeLists} "\n")
    file(APPEND ${component_cmakeLists} "foreach(dir \${subdirsSources})\n")
    file(APPEND ${component_cmakeLists} "\t if(IS_DIRECTORY \${dir})\n")
    file(APPEND ${component_cmakeLists} "\t\t file(GLOB tmp_sources \"\${dir}/*.c\")\n")
    file(APPEND ${component_cmakeLists} "\t\t list(APPEND sources \${tmp_sources})\n")
    file(APPEND ${component_cmakeLists} "\t endif()\n")
    file(APPEND ${component_cmakeLists} "endforeach()\n")
    file(APPEND ${component_cmakeLists} "\n")
    file(APPEND ${component_cmakeLists} "file(GLOB tmp_sources \"\${CMAKE_CURRENT_SOURCE_DIR}/src/*.c\")\n")
    file(APPEND ${component_cmakeLists} "file(GLOB tmp_headers \"\${CMAKE_CURRENT_SOURCE_DIR}/include/*.h\")\n")
    file(APPEND ${component_cmakeLists} "list(APPEND headers \${tmp_headers})\n")
    file(APPEND ${component_cmakeLists} "list(APPEND sources \${tmp_sources})\n")
    file(APPEND ${component_cmakeLists} "\n")
    file(APPEND ${component_cmakeLists} "add_executable(${component} \${sources} \${headers})\n")
    file(APPEND ${component_cmakeLists} "\n")
    file(APPEND ${component_cmakeLists} "foreach(dir \${subdirsHeaders})\n")
    file(APPEND ${component_cmakeLists} "\t target_include_directories(${component} PUBLIC \${dir})\n")
    file(APPEND ${component_cmakeLists} "endforeach()\n")
    file(APPEND ${component_cmakeLists} "target_include_directories(${component} PUBLIC \${CMAKE_CURRENT_SOURCE_DIR}/include)\n")
    if(NOT "${BSC_${component}_DEPS}" STREQUAL "")
        foreach(deps ${BSC_${component}_DEPS})
            string(REGEX REPLACE "BSC_" "" dependance ${deps})
            file(APPEND ${component_cmakeLists} "\n")
            file(APPEND ${component_cmakeLists} "target_link_libraries(${component} PUBLIC ${dependance})")
        endforeach(deps ${BSC_${component}_DEPS})
    endif()
    file(APPEND ${component_cmakeLists} "\n")
    file(APPEND ${component_cmakeLists} "add_dependencies(${component} copy_headers)\n")
endforeach(appc ${APPC})

foreach(libc ${LIBC})
    string(REGEX REPLACE "BSC_" "" component ${libc})
    message(STATUS "Génération du CmakeLists.txt pour la lib ${${libc}}")
    set(component_cmakeLists "${${libc}}/CMakeLists.txt")
    file(WRITE  ${component_cmakeLists} "set (sources \"\")\n")
    file(APPEND ${component_cmakeLists} "set (headers\"\")\n")
    file(APPEND ${component_cmakeLists} "set (dirsHeaders\"\")\n")
    file(APPEND ${component_cmakeLists} "\n")
    file(APPEND ${component_cmakeLists} "file(GLOB subdirsHeaders \"\${CMAKE_CURRENT_SOURCE_DIR}/include/*\")\n")
    file(APPEND ${component_cmakeLists} "file(GLOB subdirsSources \"\${CMAKE_CURRENT_SOURCE_DIR}/src/*\")\n")
    file(APPEND ${component_cmakeLists} "\n")
    file(APPEND ${component_cmakeLists} "foreach(dir \${subdirsHeaders})\n")
    file(APPEND ${component_cmakeLists} "\t if(IS_DIRECTORY \${dir})\n")
    file(APPEND ${component_cmakeLists} "\t\t list(APPEND dirsHeaders \${dir})\n")
    file(APPEND ${component_cmakeLists} "\t\t file(GLOB tmp_headers \"\${dir}/*.h\")\n")
    file(APPEND ${component_cmakeLists} "\t\t list(APPEND headers \${tmp_headers})\n")
    file(APPEND ${component_cmakeLists} "\t endif()\n")
    file(APPEND ${component_cmakeLists} "endforeach()\n")
    file(APPEND ${component_cmakeLists} "\n")
    file(APPEND ${component_cmakeLists} "foreach(dir \${subdirsSources})\n")
    file(APPEND ${component_cmakeLists} "\t if(IS_DIRECTORY \${dir})\n")
    file(APPEND ${component_cmakeLists} "\t\t file(GLOB tmp_sources \"\${dir}/*.c\")\n")
    file(APPEND ${component_cmakeLists} "\t\t list(APPEND sources \${tmp_sources})\n")
    file(APPEND ${component_cmakeLists} "\t endif()\n")
    file(APPEND ${component_cmakeLists} "endforeach()\n")
    file(APPEND ${component_cmakeLists} "\n")
    file(APPEND ${component_cmakeLists} "file(GLOB tmp_sources \"\${CMAKE_CURRENT_SOURCE_DIR}/src/*.c\" )\n")
    file(APPEND ${component_cmakeLists} "file(GLOB tmp_headers \"\${CMAKE_CURRENT_SOURCE_DIR}/include/*.h\")\n")
    file(APPEND ${component_cmakeLists} "list(APPEND headers \${tmp_headers})\n")
    file(APPEND ${component_cmakeLists} "list(APPEND sources \${tmp_sources})\n")
    file(APPEND ${component_cmakeLists} "\n")
    file(APPEND ${component_cmakeLists} "add_library(${component} STATIC \${sources} \${headers})\n")
    file(APPEND ${component_cmakeLists} "\n")
    file(APPEND ${component_cmakeLists} "foreach(dir \${dirsHeaders})\n")
    file(APPEND ${component_cmakeLists} "\t target_include_directories(${component} PUBLIC \${dir})\n")
    file(APPEND ${component_cmakeLists} "endforeach()\n")
    file(APPEND ${component_cmakeLists} "target_include_directories(${component} PUBLIC \${CMAKE_CURRENT_SOURCE_DIR}/include)\n")
    if(NOT "${BSC_${component}_DEPS}" STREQUAL "")
        foreach(deps ${BSC_${component}_DEPS})
            string(REGEX REPLACE "BSC_" "" dependance ${deps})
            file(APPEND ${component_cmakeLists} "\n")
            file(APPEND ${component_cmakeLists} "target_link_libraries(${component} PUBLIC ${dependance})")
        endforeach(deps ${BSC_${component}_DEPS})
    endif()
    file(APPEND ${component_cmakeLists} "\n")
    file(APPEND ${component_cmakeLists} "add_dependencies(${component} copy_headers)\n")
endforeach(libc ${LIBC})

foreach(libcpp ${LIBCPP})   
    string(REGEX REPLACE "BSC_" "" component ${libcpp})
    message(STATUS "Génération du CmakeLists.txt pour la lib ${${libcpp}}")
    set(component_cmakeLists "${${libcpp}}/CMakeLists.txt")
    file(WRITE  ${component_cmakeLists} "set (sources \"\")\n")
    file(APPEND ${component_cmakeLists} "set (headers\"\")\n")
    file(APPEND ${component_cmakeLists} "set (dirsHeaders\"\")\n")
    file(APPEND ${component_cmakeLists} "\n")
    file(APPEND ${component_cmakeLists} "file(GLOB subdirsHeaders \"\${CMAKE_CURRENT_SOURCE_DIR}/include/*\")\n")
    file(APPEND ${component_cmakeLists} "file(GLOB subdirsSources \"\${CMAKE_CURRENT_SOURCE_DIR}/src/*\")\n")
    file(APPEND ${component_cmakeLists} "\n")
    file(APPEND ${component_cmakeLists} "foreach(dir \${subdirsHeaders})\n")
    file(APPEND ${component_cmakeLists} "\t if(IS_DIRECTORY \${dir})\n")
    file(APPEND ${component_cmakeLists} "\t\t list(APPEND dirsHeaders \${dir})\n")
    file(APPEND ${component_cmakeLists} "\t\t file(GLOB tmp_headers \"\${dir}/*.h\" \"\${dir}/*.hpp\")\n")
    file(APPEND ${component_cmakeLists} "\t\t list(APPEND headers \${tmp_headers})\n")
    file(APPEND ${component_cmakeLists} "\t endif()\n")
    file(APPEND ${component_cmakeLists} "endforeach()\n")
    file(APPEND ${component_cmakeLists} "\n")
    file(APPEND ${component_cmakeLists} "foreach(dir \${subdirsSources})\n")
    file(APPEND ${component_cmakeLists} "\t if(IS_DIRECTORY \${dir})\n")
    file(APPEND ${component_cmakeLists} "\t\t file(GLOB tmp_sources \"\${dir}/*.c\" \"\${dir}/*.cpp\")\n")
    file(APPEND ${component_cmakeLists} "\t\t list(APPEND sources \${tmp_sources})\n")
    file(APPEND ${component_cmakeLists} "\t endif()\n")
    file(APPEND ${component_cmakeLists} "endforeach()\n")
    file(APPEND ${component_cmakeLists} "\n")
    file(APPEND ${component_cmakeLists} "file(GLOB tmp_sources \"\${CMAKE_CURRENT_SOURCE_DIR}/src/*.c\" \"\${CMAKE_CURRENT_SOURCE_DIR}/src/*.cpp\")\n")
    file(APPEND ${component_cmakeLists} "file(GLOB tmp_headers \"\${CMAKE_CURRENT_SOURCE_DIR}/include/*.h\" \"\${CMAKE_CURRENT_SOURCE_DIR}/include/*.hpp\")\n")
    file(APPEND ${component_cmakeLists} "list(APPEND headers \${tmp_headers})\n")
    file(APPEND ${component_cmakeLists} "list(APPEND sources \${tmp_sources})\n")
    file(APPEND ${component_cmakeLists} "\n")
    file(APPEND ${component_cmakeLists} "add_library(${component} STATIC \${sources} \${headers})\n")
    file(APPEND ${component_cmakeLists} "\n")
    file(APPEND ${component_cmakeLists} "foreach(dir \${dirsHeaders})\n")
    file(APPEND ${component_cmakeLists} "\t target_include_directories(${component} PUBLIC \${dir})\n")
    file(APPEND ${component_cmakeLists} "endforeach()\n")
    file(APPEND ${component_cmakeLists} "target_include_directories(${component} PUBLIC \${CMAKE_CURRENT_SOURCE_DIR}/include)\n")
    if(NOT "${BSC_${component}_DEPS}" STREQUAL "")
        foreach(deps ${BSC_${component}_DEPS})
            string(REGEX REPLACE "BSC_" "" dependance ${deps})
            file(APPEND ${component_cmakeLists} "\n")
            file(APPEND ${component_cmakeLists} "target_link_libraries(${component} PUBLIC ${dependance})")
        endforeach(deps ${BSC_${component}_DEPS})
    endif()
    file(APPEND ${component_cmakeLists} "\n")
    file(APPEND ${component_cmakeLists} "add_dependencies(${component} copy_headers)\n")
endforeach(libcpp ${LIBCPP})

foreach(dynlib ${DYNLIB})
    string(REGEX REPLACE "BSC_" "" component ${dynlib})
    message(STATUS "Génération du CmakeLists.txt pour la lib ${${dynlib}}")
    set(component_cmakeLists "${${dynlib}}/CMakeLists.txt")
    file(WRITE  ${component_cmakeLists} "set (sources \"\")\n")
    file(APPEND ${component_cmakeLists} "set (headers\"\")\n")
    file(APPEND ${component_cmakeLists} "set (dirsHeaders\"\")\n")
    file(APPEND ${component_cmakeLists} "\n")
    file(APPEND ${component_cmakeLists} "file(GLOB subdirsHeaders \"\${CMAKE_CURRENT_SOURCE_DIR}/include/*\")\n")
    file(APPEND ${component_cmakeLists} "file(GLOB subdirsSources \"\${CMAKE_CURRENT_SOURCE_DIR}/src/*\")\n")
    file(APPEND ${component_cmakeLists} "\n")
    file(APPEND ${component_cmakeLists} "foreach(dir \${subdirsHeaders})\n")
    file(APPEND ${component_cmakeLists} "\t if(IS_DIRECTORY \${dir})\n")
    file(APPEND ${component_cmakeLists} "\t\t list(APPEND dirsHeaders \${dir})\n")
    file(APPEND ${component_cmakeLists} "\t\t file(GLOB tmp_headers \"\${dir}/*.h\" \"\${dir}/*.hpp\")\n")
    file(APPEND ${component_cmakeLists} "\t\t list(APPEND headers \${tmp_headers})\n")
    file(APPEND ${component_cmakeLists} "\t endif()\n")
    file(APPEND ${component_cmakeLists} "endforeach()\n")
    file(APPEND ${component_cmakeLists} "\n")
    file(APPEND ${component_cmakeLists} "foreach(dir \${subdirsSources})\n")
    file(APPEND ${component_cmakeLists} "\t if(IS_DIRECTORY \${dir})\n")
    file(APPEND ${component_cmakeLists} "\t\t file(GLOB tmp_sources \"\${dir}/*.c\" \"\${dir}/*.cpp\")\n")
    file(APPEND ${component_cmakeLists} "\t\t list(APPEND sources \${tmp_sources})\n")
    file(APPEND ${component_cmakeLists} "\t endif()\n")
    file(APPEND ${component_cmakeLists} "endforeach()\n")
    file(APPEND ${component_cmakeLists} "\n")
    file(APPEND ${component_cmakeLists} "file(GLOB tmp_sources \"\${CMAKE_CURRENT_SOURCE_DIR}/src/*.c\" \"\${CMAKE_CURRENT_SOURCE_DIR}/src/*.cpp\")\n")
    file(APPEND ${component_cmakeLists} "file(GLOB tmp_headers \"\${CMAKE_CURRENT_SOURCE_DIR}/include/*.h\" \"\${CMAKE_CURRENT_SOURCE_DIR}/include/*.hpp\")\n")
    file(APPEND ${component_cmakeLists} "list(APPEND headers \${tmp_headers})\n")
    file(APPEND ${component_cmakeLists} "list(APPEND sources \${tmp_sources})\n")
    file(APPEND ${component_cmakeLists} "\n")
    file(APPEND ${component_cmakeLists} "add_library(${component} SHARED \${sources} \${headers})\n")
    file(APPEND ${component_cmakeLists} "\n")
    file(APPEND ${component_cmakeLists} "foreach(dir \${dirsHeaders})\n")
    file(APPEND ${component_cmakeLists} "\t target_include_directories(${component} PUBLIC \${dir})\n")
    file(APPEND ${component_cmakeLists} "endforeach()\n")
    file(APPEND ${component_cmakeLists} "target_include_directories(${component} PUBLIC \${CMAKE_CURRENT_SOURCE_DIR}/include)\n")
    if(NOT "${BSC_${component}_DEPS}" STREQUAL "")
        foreach(deps ${BSC_${component}_DEPS})
            string(REGEX REPLACE "BSC_" "" dependance ${deps})
            file(APPEND ${component_cmakeLists} "\n")
            file(APPEND ${component_cmakeLists} "target_link_libraries(${component} PUBLIC ${dependance})")
        endforeach(deps ${BSC_${component}_DEPS})
    endif()
    file(APPEND ${component_cmakeLists} "\n")
    file(APPEND ${component_cmakeLists} "add_dependencies(${component} copy_headers)\n")
endforeach(dynlib ${DYNLIB})

message(STATUS "Fin de la génération des fichiers CMakeLists.txt")

# Parcourir les composants
foreach(bsc ${COMPOSANTS})
    set(dirHeaders "")
    set(HEADERS "")
    message(NOTICE "Ajout de la cible ${${bsc}}")
    add_subdirectory(${${bsc}})
    file(GLOB dirHeaders "${${bsc}}/include/*")
    foreach(dir ${dirHeaders})
        if(IS_DIRECTORY ${dir})
            file(GLOB tmp_headers "${dir}/*.h" "${dir}/*.hpp")
            list(APPEND HEADERS ${tmp_headers})
        endif()
    endforeach(dir ${dirHeaders})
    
    file(GLOB tmp_headers "${${bsc}}/include/*.h" "${${bsc}}/include/*.hpp")
    list(APPEND HEADERS ${tmp_headers})

    # Ajouter les commandes de copie pour chaque fichier d'en-tête
    foreach(HEADER ${HEADERS})
        get_filename_component(HEADER_NAME ${HEADER} NAME)
        add_custom_command(TARGET copy_headers
            COMMAND ${CMAKE_COMMAND} -E copy ${HEADER} ${INCLUDE_DIR}/${HEADER_NAME}
            DEPENDS ${HEADER}
            COMMENT "Copie de ${HEADER} dans ${INCLUDE_DIR}"
        )
    endforeach(HEADER ${HEADERS})
endforeach(bsc ${COMPOSANTS})

# Copie des executables C++ dans le répertoire bin
foreach(EXE ${APPCPP})
    string(REGEX REPLACE "BSC_" "" component ${EXE})
    add_dependencies(copy_executables ${component})
    add_custom_command(TARGET copy_executables
        COMMAND ${CMAKE_COMMAND} -E copy $<TARGET_FILE:${component}> ${BIN_DIR}
        COMMENT "Copie $<TARGET_FILE:${component}> dans ${BIN_DIR}"
        VERBATIM
    )
endforeach(EXE ${APPCPP})

# Copie des executables C dans le répertoire bin
foreach(EXE ${APPC})
    string(REGEX REPLACE "BSC_" "" component ${EXE})
    add_dependencies(copy_executables ${component})
    add_custom_command(TARGET copy_executables
        COMMAND ${CMAKE_COMMAND} -E copy $<TARGET_FILE:${component}> ${BIN_DIR}
        COMMENT "Copie $<TARGET_FILE:${component}> dans ${BIN_DIR}"
        VERBATIM
    )
endforeach(EXE ${APPC})

# Copie des libs C dans le répertoire libs
foreach(LIBCPP ${LIBCPP})
    string(REGEX REPLACE "BSC_" "" component ${LIBCPP})
    add_dependencies(copy_libs ${component})
    add_custom_command(TARGET copy_libs
        COMMAND ${CMAKE_COMMAND} -E copy $<TARGET_FILE:${component}> ${LIB_DIR}
        COMMENT "Copie $<TARGET_FILE:${component}> dans ${LIB_DIR}"
        VERBATIM
    )
endforeach(LIBCPP ${LIBCPP})

# Copie des libs C dans le répertoire libs
foreach(LIBC ${LIBC})
    string(REGEX REPLACE "BSC_" "" component ${LIBC})
    add_dependencies(copy_libs ${component})
    add_custom_command(TARGET copy_libs
        COMMAND ${CMAKE_COMMAND} -E copy $<TARGET_FILE:${component}> ${LIB_DIR}
        COMMENT "Copie $<TARGET_FILE:${component}> dans ${LIB_DIR}"
        VERBATIM
    )
endforeach(LIBC ${LIBC})

# Copie des libs dynamiques dans le répertoire libs
foreach(DYNLIB ${DYNLIB})
    string(REGEX REPLACE "BSC_" "" component ${DYNLIB})
    add_dependencies(copy_libs ${component})
    add_custom_command(TARGET copy_libs
        COMMAND ${CMAKE_COMMAND} -E copy $<TARGET_FILE:${component}> ${LIB_DIR}
        COMMENT "Copie $<TARGET_FILE:${component}> dans ${LIB_DIR}"
        VERBATIM
    )
endforeach(DYNLIB ${LIBC})
